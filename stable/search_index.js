var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EquivalenceClassesConstructor","category":"page"},{"location":"#EquivalenceClassesConstructor","page":"Home","title":"EquivalenceClassesConstructor","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EquivalenceClassesConstructor]","category":"page"},{"location":"#EquivalenceClassesConstructor.EquivalenceClasses-Tuple{EquivalenceClassesConstructor.Predicate,AbstractArray}","page":"Home","title":"EquivalenceClassesConstructor.EquivalenceClasses","text":"EquivalenceClasses(pred, indl)\n\nConstructs an EquivalenceClasses struct from a predicate pred with indices in the list indl\n\nExamples\n\njulia> EquivalenceClasses(Predicate((x,y)->all(x .== -y)),\n                          [(i,j) for i in -2:2 for j in 4:7])\n\n\n\n\n\n","category":"method"},{"location":"#EquivalenceClassesConstructor.DFS!-Tuple{BitArray{2},Int64,AbstractArray}","page":"Home","title":"EquivalenceClassesConstructor.DFS!","text":"DFS!(adj::BitArray{2}, start::Int64, visited::AbstractArray)\n\nDepth first search in graph with adjacency matrix adj from start. This will delete all reachable nodes (from start) in open.\n\n\n\n\n\n","category":"method"},{"location":"#EquivalenceClassesConstructor.build_adj_matrix-Tuple{EquivalenceClassesConstructor.Predicate,Any}","page":"Home","title":"EquivalenceClassesConstructor.build_adj_matrix","text":"build_adj_matrix(pred, indl)\n\nConstructs adjacency matrix with vertices from indl and edges from pred(i,j) where i,j âˆˆ indl\n\n\n\n\n\n","category":"method"},{"location":"#EquivalenceClassesConstructor.check_for_equivalence_relation-Tuple{EquivalenceClassesConstructor.Predicate,Any}","page":"Home","title":"EquivalenceClassesConstructor.check_for_equivalence_relation","text":"check_for_equivalence_relation(f::Predicate, dom)\n\nGiven a Predicate f over a domain dom, return true if f is a equivalence relation, false otherwise. One can create a symmetric equivalency relation with make_symmetric(f)\n\nExamples\n\ntrue\njulia> check_for_equivalence_relation(Predicate((x,y) -> x == y+2), -1:10)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"#EquivalenceClassesConstructor.make_symmetric-Tuple{EquivalenceClassesConstructor.Predicate}","page":"Home","title":"EquivalenceClassesConstructor.make_symmetric","text":"make_symmetric(f::Predicate)\n\nCreate symmetric predicate from arbitrary predicateg\n\n\n\n\n\n","category":"method"}]
}
